//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Stacja_paliw.MonitoringService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MonitoringStatus", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class MonitoringStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool MonitoringStartedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool MonitoringStarted {
            get {
                return this.MonitoringStartedField;
            }
            set {
                if ((this.MonitoringStartedField.Equals(value) != true)) {
                    this.MonitoringStartedField = value;
                    this.RaisePropertyChanged("MonitoringStarted");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MonitoringService.IMonitoringService")]
    public interface IMonitoringService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitoringService/StartMonitoring", ReplyAction="http://tempuri.org/IMonitoringService/StartMonitoringResponse")]
        string StartMonitoring();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitoringService/StartMonitoring", ReplyAction="http://tempuri.org/IMonitoringService/StartMonitoringResponse")]
        System.Threading.Tasks.Task<string> StartMonitoringAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitoringService/StopMonitoring", ReplyAction="http://tempuri.org/IMonitoringService/StopMonitoringResponse")]
        string StopMonitoring();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitoringService/StopMonitoring", ReplyAction="http://tempuri.org/IMonitoringService/StopMonitoringResponse")]
        System.Threading.Tasks.Task<string> StopMonitoringAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitoringService/GetServiceStatus", ReplyAction="http://tempuri.org/IMonitoringService/GetServiceStatusResponse")]
        Stacja_paliw.MonitoringService.MonitoringStatus GetServiceStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitoringService/GetServiceStatus", ReplyAction="http://tempuri.org/IMonitoringService/GetServiceStatusResponse")]
        System.Threading.Tasks.Task<Stacja_paliw.MonitoringService.MonitoringStatus> GetServiceStatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitoringService/ViewCamera", ReplyAction="http://tempuri.org/IMonitoringService/ViewCameraResponse")]
        string ViewCamera(int cameraID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitoringService/ViewCamera", ReplyAction="http://tempuri.org/IMonitoringService/ViewCameraResponse")]
        System.Threading.Tasks.Task<string> ViewCameraAsync(int cameraID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMonitoringServiceChannel : Stacja_paliw.MonitoringService.IMonitoringService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MonitoringServiceClient : System.ServiceModel.ClientBase<Stacja_paliw.MonitoringService.IMonitoringService>, Stacja_paliw.MonitoringService.IMonitoringService {
        
        public MonitoringServiceClient() {
        }
        
        public MonitoringServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MonitoringServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MonitoringServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MonitoringServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string StartMonitoring() {
            return base.Channel.StartMonitoring();
        }
        
        public System.Threading.Tasks.Task<string> StartMonitoringAsync() {
            return base.Channel.StartMonitoringAsync();
        }
        
        public string StopMonitoring() {
            return base.Channel.StopMonitoring();
        }
        
        public System.Threading.Tasks.Task<string> StopMonitoringAsync() {
            return base.Channel.StopMonitoringAsync();
        }
        
        public Stacja_paliw.MonitoringService.MonitoringStatus GetServiceStatus() {
            return base.Channel.GetServiceStatus();
        }
        
        public System.Threading.Tasks.Task<Stacja_paliw.MonitoringService.MonitoringStatus> GetServiceStatusAsync() {
            return base.Channel.GetServiceStatusAsync();
        }
        
        public string ViewCamera(int cameraID) {
            return base.Channel.ViewCamera(cameraID);
        }
        
        public System.Threading.Tasks.Task<string> ViewCameraAsync(int cameraID) {
            return base.Channel.ViewCameraAsync(cameraID);
        }
    }
}
